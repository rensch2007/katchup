stages:
  - notify_start
  - build
  - deploy
  - notify_end

variables:
  DOCKER_IMAGE: kylesung0520/katchup

notify_discord_start:
  stage: notify_start
  script:
    - |
      curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"🚀 *CI/CD 시작됨:* \`$CI_PROJECT_NAME\` 의 \`$CI_COMMIT_REF_NAME\` 배포 파이프라인이 시작되었습니다.\"}" $DISCORD_WEBHOOK_URL

build_backend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin > /dev/null 2>&1
    - cd backend
    - |
      if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
        docker build -t "$DOCKER_IMAGE:latest" . > /dev/null 2>&1
        docker push "$DOCKER_IMAGE:latest" > /dev/null 2>&1
      elif [ "$CI_COMMIT_REF_NAME" = "development" ]; then
        docker build -t "$DOCKER_IMAGE:dev" . > /dev/null 2>&1
        docker push "$DOCKER_IMAGE:dev" > /dev/null 2>&1
      fi
  only:
    - main
    - development

deploy_to_ec2:
  stage: deploy
  script:
    - mkdir -p ~/.ssh
    - |
      if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/gitlab-ec2-openssh
        TARGET_IP=$EC2_IP
        IMAGE_TAG=latest
        CONTAINER_NAME=katchup-backend
        ENV_PATH=.env
        HOST_PORT=5001
      elif [ "$CI_COMMIT_REF_NAME" = "development" ]; then
        echo "$DEV_SSH_PRIVATE_KEY" > ~/.ssh/gitlab-ec2-openssh
        TARGET_IP=$DEV_EC2_IP
        IMAGE_TAG=dev
        CONTAINER_NAME=katchup-backend-dev
        ENV_PATH=.env.dev
        HOST_PORT=5001 
      fi
    - chmod 600 ~/.ssh/gitlab-ec2-openssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $TARGET_IP >> ~/.ssh/known_hosts
    - >
      ssh -i ~/.ssh/gitlab-ec2-openssh -o StrictHostKeyChecking=no ec2-user@$TARGET_IP "
        docker pull $DOCKER_IMAGE:$IMAGE_TAG &&
        docker stop $CONTAINER_NAME || true &&
        docker rm $CONTAINER_NAME || true &&
        docker run -d --name $CONTAINER_NAME \
          --env-file /home/ec2-user/katchup-backend/$ENV_PATH \
          -p $HOST_PORT:5001 \
          $DOCKER_IMAGE:$IMAGE_TAG
      "
  only:
    - main
    - development

notify_discord:
  stage: notify_end
  script:
    - |
      STATUS_MSG="✅ *CI/CD 성공:* \`$CI_PROJECT_NAME\` 의 \`$CI_COMMIT_REF_NAME\` 브랜치 배포가 완료되었습니다."
      if [[ "$CI_JOB_STATUS" == "failed" ]]; then
        STATUS_MSG="❌ *CI/CD 실패:* \`$CI_PROJECT_NAME\` 의 \`$CI_COMMIT_REF_NAME\` 브랜치 배포에 실패했습니다."
      fi
      curl -H "Content-Type: application/json" -X POST -d "{\"content\": \"$STATUS_MSG\"}" $DISCORD_WEBHOOK_URL
  when: always
